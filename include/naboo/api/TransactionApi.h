/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TransactionApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_TransactionApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_TransactionApi_H_



#include "naboo/ApiClient.h"

#include "naboo/model/DeleteTransactionRequest.h"
#include "naboo/model/DeleteTransactionResponse.h"
#include "naboo/model/GetAllTransaction.h"
#include "naboo/model/GetOneTransaction.h"
#include "naboo/model/HTTPValidationError.h"
#include "naboo/model/TransactionRequest.h"
#include "naboo/model/TransactionResponse.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  TransactionApi 
{
public:

    explicit TransactionApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~TransactionApi();

    /// <summary>
    /// Create Transaction
    /// </summary>
    /// <remarks>
    /// This endpoint allows authenticated users to create a transaction by submitting a request with the necessary details. The endpoint ensures that the user&#39;s access level permits transaction creation and enforces a rate limit of 30 requests. It checks that the number of products is within the allowed range (1-20) and calculates the total transaction amount, applying a 20% charge for escrow transactions. It also verifies that the total amount does not exceed a specific threshold (2,000,000). The user&#39;s IP address and browser information are logged, and the transaction details are saved with relevant metadata, including a unique order ID and the associated account state. If any conditions are not met, appropriate error messages are returned.
    /// </remarks>
    /// <param name="transactionRequest"></param>
    pplx::task<std::shared_ptr<TransactionResponse>> createTransactionTransactionCreateTransactionPost(
        std::shared_ptr<TransactionRequest> transactionRequest
    ) const;
    /// <summary>
    /// Delete Transaction
    /// </summary>
    /// <remarks>
    /// This endpoint allows authenticated users to delete a transaction by submitting a request with the necessary details. The endpoint checks the user&#39;s access level to ensure they have permission to delete transactions and enforces a rate limit of 30 requests. It verifies that the transaction belongs to the user and has not already been deleted or withdrawn. If the transaction is paid and has a payment reference, it processes refunds and updates the user&#39;s account balance accordingly.
    /// </remarks>
    /// <param name="deleteTransactionRequest"></param>
    pplx::task<std::shared_ptr<DeleteTransactionResponse>> deleteTransactionTransactionDeleteTransactionDelete(
        std::shared_ptr<DeleteTransactionRequest> deleteTransactionRequest
    ) const;
    /// <summary>
    /// Get One Transaction
    /// </summary>
    /// <remarks>
    /// This endpoint allows authenticated users to retrieve the details of a specific transaction using the order ID. The endpoint ensures the user has read access and enforces a rate limit of 30 requests. It checks if the transaction exists in the database and if the user has the appropriate access rights,then provides a checkout URL for the transaction and others informations
    /// </remarks>
    /// <param name="orderId"></param>
    pplx::task<std::shared_ptr<GetOneTransaction>> getOneTransactionTransactionGetOneTransactionGet(
        utility::string_t orderId
    ) const;
    /// <summary>
    /// Get Transactions
    /// </summary>
    /// <remarks>
    /// This endpoint allows authenticated users to retrieve a list of their visible transactions, up to a maximum of 50. The endpoint enforces a rate limit of 30 requests and ensures the user has read access.
    /// </remarks>
    pplx::task<std::shared_ptr<GetAllTransaction>> getTransactionsTransactionGetTransactionsGet(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_TransactionApi_H_ */

