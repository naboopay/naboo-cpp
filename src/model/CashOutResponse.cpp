/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "naboo/model/CashOutResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CashOutResponse::CashOutResponse()
{
    m_Phone_number = utility::conversions::to_string_t("");
    m_Phone_numberIsSet = false;
    m_Amount = 0;
    m_AmountIsSet = false;
    m_Full_name = utility::conversions::to_string_t("");
    m_Full_nameIsSet = false;
    m_StatusIsSet = false;
}

CashOutResponse::~CashOutResponse()
{
}

void CashOutResponse::validate()
{
    // TODO: implement validation
}

web::json::value CashOutResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Phone_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("phone_number"))] = ModelBase::toJson(m_Phone_number);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_Full_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("full_name"))] = ModelBase::toJson(m_Full_name);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool CashOutResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("phone_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("full_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("full_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullName);
            setFullName(refVal_setFullName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TransactionStatusEnum> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void CashOutResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Phone_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone_number")), m_Phone_number));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_Full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("full_name")), m_Full_name));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool CashOutResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("phone_number"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone_number"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        int32_t refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("full_name"))))
    {
        utility::string_t refVal_setFullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("full_name"))), refVal_setFullName );
        setFullName(refVal_setFullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<TransactionStatusEnum> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

utility::string_t CashOutResponse::getPhoneNumber() const
{
    return m_Phone_number;
}

void CashOutResponse::setPhoneNumber(const utility::string_t& value)
{
    m_Phone_number = value;
    m_Phone_numberIsSet = true;
}

bool CashOutResponse::phoneNumberIsSet() const
{
    return m_Phone_numberIsSet;
}

void CashOutResponse::unsetPhone_number()
{
    m_Phone_numberIsSet = false;
}
int32_t CashOutResponse::getAmount() const
{
    return m_Amount;
}

void CashOutResponse::setAmount(int32_t value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool CashOutResponse::amountIsSet() const
{
    return m_AmountIsSet;
}

void CashOutResponse::unsetAmount()
{
    m_AmountIsSet = false;
}
utility::string_t CashOutResponse::getFullName() const
{
    return m_Full_name;
}

void CashOutResponse::setFullName(const utility::string_t& value)
{
    m_Full_name = value;
    m_Full_nameIsSet = true;
}

bool CashOutResponse::fullNameIsSet() const
{
    return m_Full_nameIsSet;
}

void CashOutResponse::unsetFull_name()
{
    m_Full_nameIsSet = false;
}
std::shared_ptr<TransactionStatusEnum> CashOutResponse::getStatus() const
{
    return m_Status;
}

void CashOutResponse::setStatus(const std::shared_ptr<TransactionStatusEnum>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool CashOutResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void CashOutResponse::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


