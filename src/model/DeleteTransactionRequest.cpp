/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "naboo/model/DeleteTransactionRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeleteTransactionRequest::DeleteTransactionRequest()
{
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
}

DeleteTransactionRequest::~DeleteTransactionRequest()
{
}

void DeleteTransactionRequest::validate()
{
    // TODO: implement validation
}

web::json::value DeleteTransactionRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t(U("order_id"))] = ModelBase::toJson(m_Order_id);
    }

    return val;
}

bool DeleteTransactionRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("order_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    return ok;
}

void DeleteTransactionRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_id")), m_Order_id));
    }
}

bool DeleteTransactionRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("order_id"))))
    {
        utility::string_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_id"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    return ok;
}

utility::string_t DeleteTransactionRequest::getOrderId() const
{
    return m_Order_id;
}

void DeleteTransactionRequest::setOrderId(const utility::string_t& value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}

bool DeleteTransactionRequest::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void DeleteTransactionRequest::unsetOrder_id()
{
    m_Order_idIsSet = false;
}
}
}
}
}


