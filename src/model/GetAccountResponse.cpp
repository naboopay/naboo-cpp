/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "naboo/model/GetAccountResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetAccountResponse::GetAccountResponse()
{
    m_Account_number = utility::conversions::to_string_t("");
    m_Account_numberIsSet = false;
    m_Balance = 0.0;
    m_BalanceIsSet = false;
    m_Account_is_activate = false;
    m_Account_is_activateIsSet = false;
    m_Method_of_paymentIsSet = false;
    m_Loyalty_credit = 0;
    m_Loyalty_creditIsSet = false;
}

GetAccountResponse::~GetAccountResponse()
{
}

void GetAccountResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetAccountResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Account_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("account_number"))] = ModelBase::toJson(m_Account_number);
    }
    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t(U("balance"))] = ModelBase::toJson(m_Balance);
    }
    if(m_Account_is_activateIsSet)
    {
        val[utility::conversions::to_string_t(U("account_is_activate"))] = ModelBase::toJson(m_Account_is_activate);
    }
    if(m_Method_of_paymentIsSet)
    {
        val[utility::conversions::to_string_t(U("method_of_payment"))] = ModelBase::toJson(m_Method_of_payment);
    }
    if(m_Loyalty_creditIsSet)
    {
        val[utility::conversions::to_string_t(U("loyalty_credit"))] = ModelBase::toJson(m_Loyalty_credit);
    }

    return val;
}

bool GetAccountResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountNumber);
            setAccountNumber(refVal_setAccountNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("balance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("balance")));
        if(!fieldValue.is_null())
        {
            double refVal_setBalance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBalance);
            setBalance(refVal_setBalance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_is_activate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_is_activate")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAccountIsActivate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountIsActivate);
            setAccountIsActivate(refVal_setAccountIsActivate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("method_of_payment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("method_of_payment")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Wallet> refVal_setMethodOfPayment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMethodOfPayment);
            setMethodOfPayment(refVal_setMethodOfPayment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("loyalty_credit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("loyalty_credit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLoyaltyCredit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLoyaltyCredit);
            setLoyaltyCredit(refVal_setLoyaltyCredit);
        }
    }
    return ok;
}

void GetAccountResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Account_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_number")), m_Account_number));
    }
    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("balance")), m_Balance));
    }
    if(m_Account_is_activateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_is_activate")), m_Account_is_activate));
    }
    if(m_Method_of_paymentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("method_of_payment")), m_Method_of_payment));
    }
    if(m_Loyalty_creditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("loyalty_credit")), m_Loyalty_credit));
    }
}

bool GetAccountResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account_number"))))
    {
        utility::string_t refVal_setAccountNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_number"))), refVal_setAccountNumber );
        setAccountNumber(refVal_setAccountNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("balance"))))
    {
        double refVal_setBalance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("balance"))), refVal_setBalance );
        setBalance(refVal_setBalance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_is_activate"))))
    {
        bool refVal_setAccountIsActivate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_is_activate"))), refVal_setAccountIsActivate );
        setAccountIsActivate(refVal_setAccountIsActivate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("method_of_payment"))))
    {
        std::shared_ptr<Wallet> refVal_setMethodOfPayment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("method_of_payment"))), refVal_setMethodOfPayment );
        setMethodOfPayment(refVal_setMethodOfPayment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("loyalty_credit"))))
    {
        int32_t refVal_setLoyaltyCredit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("loyalty_credit"))), refVal_setLoyaltyCredit );
        setLoyaltyCredit(refVal_setLoyaltyCredit);
    }
    return ok;
}

utility::string_t GetAccountResponse::getAccountNumber() const
{
    return m_Account_number;
}

void GetAccountResponse::setAccountNumber(const utility::string_t& value)
{
    m_Account_number = value;
    m_Account_numberIsSet = true;
}

bool GetAccountResponse::accountNumberIsSet() const
{
    return m_Account_numberIsSet;
}

void GetAccountResponse::unsetAccount_number()
{
    m_Account_numberIsSet = false;
}
double GetAccountResponse::getBalance() const
{
    return m_Balance;
}

void GetAccountResponse::setBalance(double value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}

bool GetAccountResponse::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void GetAccountResponse::unsetBalance()
{
    m_BalanceIsSet = false;
}
bool GetAccountResponse::isAccountIsActivate() const
{
    return m_Account_is_activate;
}

void GetAccountResponse::setAccountIsActivate(bool value)
{
    m_Account_is_activate = value;
    m_Account_is_activateIsSet = true;
}

bool GetAccountResponse::accountIsActivateIsSet() const
{
    return m_Account_is_activateIsSet;
}

void GetAccountResponse::unsetAccount_is_activate()
{
    m_Account_is_activateIsSet = false;
}
std::shared_ptr<Wallet> GetAccountResponse::getMethodOfPayment() const
{
    return m_Method_of_payment;
}

void GetAccountResponse::setMethodOfPayment(const std::shared_ptr<Wallet>& value)
{
    m_Method_of_payment = value;
    m_Method_of_paymentIsSet = true;
}

bool GetAccountResponse::methodOfPaymentIsSet() const
{
    return m_Method_of_paymentIsSet;
}

void GetAccountResponse::unsetMethod_of_payment()
{
    m_Method_of_paymentIsSet = false;
}
int32_t GetAccountResponse::getLoyaltyCredit() const
{
    return m_Loyalty_credit;
}

void GetAccountResponse::setLoyaltyCredit(int32_t value)
{
    m_Loyalty_credit = value;
    m_Loyalty_creditIsSet = true;
}

bool GetAccountResponse::loyaltyCreditIsSet() const
{
    return m_Loyalty_creditIsSet;
}

void GetAccountResponse::unsetLoyalty_credit()
{
    m_Loyalty_creditIsSet = false;
}
}
}
}
}


