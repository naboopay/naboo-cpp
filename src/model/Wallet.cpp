/**
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "naboo/model/Wallet.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

Wallet::eWallet toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("WAVE")))
        return Wallet::eWallet::Wallet_WAVE;
    if (val == utility::conversions::to_string_t(U("ORANGE_MONEY")))
        return Wallet::eWallet::Wallet_ORANGE_MONEY;
    if (val == utility::conversions::to_string_t(U("FREE_MONEY")))
        return Wallet::eWallet::Wallet_FREE_MONEY;
    return {};
}

EnumUnderlyingType fromEnum(Wallet::eWallet e)
{
    switch (e)
    {
    case Wallet::eWallet::Wallet_WAVE:
        return U("WAVE");
    case Wallet::eWallet::Wallet_ORANGE_MONEY:
        return U("ORANGE_MONEY");
    case Wallet::eWallet::Wallet_FREE_MONEY:
        return U("FREE_MONEY");
    default:
        break;
    }
    return {};
}
}

Wallet::Wallet()
{
}

Wallet::~Wallet()
{
}

void Wallet::validate()
{
    // TODO: implement validation
}

web::json::value Wallet::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool Wallet::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void Wallet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Wallet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

Wallet::eWallet Wallet::getValue() const
{
   return m_value;
}

void Wallet::setValue(Wallet::eWallet const value)
{
   m_value = value;
}


}
}
}
}


